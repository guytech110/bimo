openapi: 3.0.3
info:
  title: bimo API
  version: 1.0.0
  description: API for managing provider connections and billing usage (used by the bimo CLI and dashboard)
servers:
  - url: http://localhost:8001
paths:
  /v1/health:
    get:
      summary: Health
      description: Returns basic health status for the service.
      operationId: getHealth
      tags:
        - health
      responses:
        "200": { description: OK }
  /v1/ready:
    get:
      summary: Readiness
      description: Returns readiness status for the service (dependencies initialized).
      operationId: getReady
      tags:
        - health
      responses:
        "200": { description: OK }
  /v1/providers/catalog:
    get:
      summary: Provider catalog
      description: List available providers supported by the platform (e.g., Gemini, OpenAI).
      operationId: getProviderCatalog
      tags:
        - providers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Provider' }
  /v1/providers/connections:
    get:
      summary: Connected providers
      description: Return a paginated list of stored provider connections (redacted credentials).
      operationId: listProviderConnections
      tags:
        - providers
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: per_page
          schema: { type: integer, default: 50 }
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              schema: { type: integer }
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: array, items: { type: object } }
                  meta: { type: object }
  /v1/providers/{provider_id}/status:
    get:
      summary: Provider connection status
      description: Returns connection status for a given provider id (connected/last seen).
      operationId: getProviderStatus
      tags:
        - providers
      parameters:
        - in: path
          name: provider_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  provider_id: { type: string }
                  connected: { type: boolean }
                  status: { type: string }
                  connected_at: { type: string, format: date-time }
  /v1/providers/{provider_id}/billing/usage:
    get:
      summary: Provider usage
      description: Retrieve billing/export usage for the provider connection over a date range.
      operationId: getProviderBillingUsage
      tags:
        - providers
      parameters:
        - in: path
          name: provider_id
          required: true
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
      responses:
        "200": { description: OK }
  /v1/admin/ingest/invoice:
    post:
      summary: Admin ingest invoice
      description: Admin-only endpoint to ingest invoice/billing rows into the system.
      operationId: adminIngestInvoice
      tags:
        - admin
      parameters:
        - in: header
          name: X-Admin-Token
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                invoice:
                  type: object
                  additionalProperties: true
      responses:
        "200": { description: OK }
  /v1/providers/{provider_id}/connect:
    post:
      summary: Connect provider
      description: Create a new provider connection (supports API key or service-account credentials).
      operationId: connectProvider
      tags:
        - providers
      parameters:
        - in: path
          name: provider_id
          required: true
          schema: { type: string }
          description: Provider id (e.g. "gemini", "openai")
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ConnectProviderRequest' }
      responses:
        "201": { description: Created }
        "409": { description: Conflict (duplicate idempotency key) }
  /v1/spend/summary:
    get:
      summary: Spend summary
      description: Return aggregated spend summary for providers.
      operationId: getSpendSummary
      tags:
        - spend
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
      responses:
        "200": { description: OK }
  /v1/spend/trends:
    get:
      summary: Spend trends
      description: Return time-series spend trends for a provider.
      operationId: getSpendTrends
      tags:
        - spend
      parameters:
        - in: query
          name: provider
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
      responses:
        "200": { description: OK }
components:
  schemas:
    Provider:
      type: object
      required: [id, name, category]
      properties:
        id: { type: string }
        name: { type: string }
        category: { type: string, enum: [ai, cloud, saas] }
        logo_url: { type: string }
    ConnectProviderRequest:
      type: object
      required: [provider_id, method]
      properties:
        provider_id: { type: string }
        method: { type: string, enum: [api_key, oauth] }
        credentials:
          type: object
          additionalProperties: true
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object }
